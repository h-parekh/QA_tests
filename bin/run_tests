#!/usr/bin/env ruby -wU
# frozen_string_literal: true
unless defined?(Bunyan)
  gem 'bunyan_capybara'
  require 'bunyan_capybara/bunyan_constants'
end

# *****************************************************************************
#
# CONFIGURATION OPTIONS
#
# *****************************************************************************

CONFIG_KEYS = [:ENVIRONMENT, :LOG_LEVEL, :SKIP_CLOUDWATCH, :SKIP_VERIFY_NETWORK_TRAFFIC, :SKIP_MALEFICENT, :ALLOW_ALL_NETWORK_HOSTS, :USE_CONTENTFUL_SPACE, :VERSION_NUMBER, :RELEASE_NUMBER].freeze

ENVIRONMENT = ENV.fetch('ENVIRONMENT', Bunyan::DEFAULT_ENVIRONMENT)
LOG_LEVEL = ENV.fetch('LOG_LEVEL', Bunyan::DEFAULT_LOG_LEVEL)
SKIP_CLOUDWATCH = ENV.fetch('SKIP_CLOUDWATCH', nil)
SKIP_VERIFY_NETWORK_TRAFFIC = ENV.fetch('SKIP_VERIFY_NETWORK_TRAFFIC', nil)
SKIP_MALEFICENT = ENV.fetch('SKIP_MALEFICENT', nil)
ALLOW_ALL_NETWORK_HOSTS = ENV.fetch('ALLOW_ALL_NETWORK_HOSTS', false)
USE_CONTENTFUL_SPACE = ENV.fetch('USE_CONTENTFUL_SPACE', nil)
VERSION_NUMBER = ENV.fetch('VERSION_NUMBER', nil)
RELEASE_NUMBER = ENV.fetch('RELEASE_NUMBER', nil)

# *****************************************************************************
#
# HELP OPTIONS
#
# *****************************************************************************

if ARGV.grep(/-h/i).size == 1
  $stdout.puts "This script is responsible for running the tests of the QA_test repository."
  $stdout.puts ""
  $stdout.puts "$ ./bin/#{File.basename(__FILE__)} [path/to/spec]"
  $stdout.puts ""
  $stdout.puts "To run all of the tests:"
  $stdout.puts "  $ ./bin/run_tests"
  $stdout.puts ""
  $stdout.puts "To run some of the tests:"
  $stdout.puts "  $ ./bin/run_tests path/to/spec.rb"
  $stdout.puts ""
  $stdout.puts "You may also pass any options of the options of rspec to this script"
  $stdout.puts ""
  $stdout.puts "Current Configuration:"
  $stdout.puts ""
  CONFIG_KEYS.each do |key|
    $stdout.puts "\t#{key}='#{Object.const_get(key)}'"
  end

  $stdout.puts ""
  $stdout.puts "Available LOG_LEVEL: #{Bunyan::AVAILABLE_LOG_LEVELS.join(', ')}"
  $stdout.puts "You can override the configuration option by adding the corresponding"
  $stdout.puts "ENV variable."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ ENVIRONMENT=local ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "SKIP_CLOUDWATCH: By default we notify CloudWatch of test events. In some cases,"
  $stdout.puts "this is not desired (e.g. local development). So you can set SKIP_CLOUDWATCH=true."
  $stdout.puts "ENV variable to not notify CloudWatch."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ SKIP_CLOUDWATCH=true ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "SKIP_VERIFY_NETWORK_TRAFFIC: By default we verify network traffic of all scenarios. In some cases,"
  $stdout.puts "this is not desired (e.g. testing beta sites). So you can set SKIP_VERIFY_NETWORK_TRAFFIC=true as part of the ENV."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ SKIP_VERIFY_NETWORK_TRAFFIC=true ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "SKIP_MALEFICENT: Do not use sleep injections for retrying tests that fail."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ SKIP_MALEFICENT=true ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "ALLOW_ALL_NETWORK_HOSTS: By default we will skip network traffic from #{Bunyan::DISALLOWED_NETWORK_TRAFFIC_REGEXP.inspect}. If"
  $stdout.puts "this is not desired, ALLOW_ALL_NETWORK_HOSTS=true as part of the ENV."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ ALLOW_ALL_NETWORK_HOSTS=true ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "USE_CONTENTFUL_SPACE: This toggle is only used for and required for contentful testing. When testing contentful, there are two options for contentful space: prod and prep."
  $stdout.puts "In order to use these spaces, the user needs a token from the shared drive which differs for each space. So, you must define which space you want for your test in the command line."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ USE_CONTENTFUL_SPACE=prod ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "VERSION_NUMBER: When testing usurper, you must input the version number for the version of the site you want to test so that the tests run accurately and small design changes"
  $stdout.puts "from version to version do not cause failures."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ VERSION_NUMBER=v2017.2 ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""

  $stdout.puts "RELEASE_NUMBER: This toggle is only used for contentful_testing. When testing contentful, you must provide a release number to define the stack of deployed VERSION_NUMBER(s)"
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ RELEASE_NUMBER=r20170922 ./bin/#{File.basename(__FILE__)}"
  exit(0)
end

# Keep only the environment variables that have been set to a "truthy" value
env_variables_to_inject = CONFIG_KEYS.select { |key| Object.const_get(key) }.map { |key| "#{key}=#{Object.const_get(key)}" }.join(" ")
exec("#{env_variables_to_inject} bundle exec rspec #{ARGV.join(' ')}")
