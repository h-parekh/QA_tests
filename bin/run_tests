#!/usr/bin/env ruby -wU
# frozen_string_literal: true

require File.expand_path('../../spec/spec_support/example_logging_constants', __FILE__)

# *****************************************************************************
#
# CONFIGURATION OPTIONS
#
# *****************************************************************************

CONFIG_KEYS = [:ENVIRONMENT, :LOG_LEVEL, :SKIP_CLOUDWATCH, :SKIP_VERIFY_NETWORK_TRAFFIC, :ALLOW_ALL_NETWORK_HOSTS].freeze

ENVIRONMENT = ENV.fetch('ENVIRONMENT', ExampleLogging::DEFAULT_ENVIRONMENT)
LOG_LEVEL = ENV.fetch('LOG_LEVEL', ExampleLogging::DEFAULT_LOG_LEVEL)
SKIP_CLOUDWATCH = ENV.fetch('SKIP_CLOUDWATCH', nil)
SKIP_VERIFY_NETWORK_TRAFFIC = ENV.fetch('SKIP_VERIFY_NETWORK_TRAFFIC', nil)
ALLOW_ALL_NETWORK_HOSTS = ENV.fetch('ALLOW_ALL_NETWORK_HOSTS', false)

# *****************************************************************************
#
# HELP OPTIONS
#
# *****************************************************************************

if ARGV.grep(/-h/i).size == 1
  $stdout.puts "This script is responsible for running the tests of the QA_test repository."
  $stdout.puts ""
  $stdout.puts "$ ./bin/#{File.basename(__FILE__)} [path/to/spec]"
  $stdout.puts ""
  $stdout.puts "To run all of the tests:"
  $stdout.puts "  $ ./bin/run_tests"
  $stdout.puts ""
  $stdout.puts "To run some of the tests:"
  $stdout.puts "  $ ./bin/run_tests path/to/spec.rb"
  $stdout.puts ""
  $stdout.puts "You may also pass any options of the options of rspec to this script"
  $stdout.puts ""
  $stdout.puts "Current Configuration:"
  $stdout.puts ""
  CONFIG_KEYS.each do |key|
    $stdout.puts "\t#{key}='#{Object.const_get(key)}'"
  end
  $stdout.puts ""
  $stdout.puts "Available LOG_LEVEL: #{ExampleLogging::AVAILABLE_LOG_LEVELS.join(', ')}"
  $stdout.puts "You can override the configuration option by adding the corresponding"
  $stdout.puts "ENV variable."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ ENVIRONMENT=local ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""
  $stdout.puts "SKIP_CLOUDWATCH: By default we notify CloudWatch of test events. In some cases,"
  $stdout.puts "this is not desired (e.g. local development). So you can set SKIP_CLOUDWATCH=true."
  $stdout.puts "ENV variable to not notify CloudWatch."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ SKIP_CLOUDWATCH=true ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""
  $stdout.puts "SKIP_VERIFY_NETWORK_TRAFFIC: By default we verify network traffic of all scenarios. In some cases,"
  $stdout.puts "this is not desired (e.g. testing beta sites). So you can set SKIP_VERIFY_NETWORK_TRAFFIC=true as part of the ENV."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ SKIP_VERIFY_NETWORK_TRAFFIC=true ./bin/#{File.basename(__FILE__)}"
  $stdout.puts ""
  $stdout.puts "ALLOW_ALL_NETWORK_HOSTS: By default we will skip network traffic from #{ExampleLogging::DISALLOWED_NETWORK_TRAFFIC_REGEXP.inspect}. If"
  $stdout.puts "this is not desired, ALLOW_ALL_NETWORK_HOSTS=true as part of the ENV."
  $stdout.puts ""
  $stdout.puts "Example:"
  $stdout.puts "$ ALLOW_ALL_NETWORK_HOSTS=true ./bin/#{File.basename(__FILE__)}"
  exit(0)
end

# Keep only the environment variables that have been set to a "truthy" value
env_variables_to_inject = CONFIG_KEYS.select { |key| Object.const_get(key) }.map { |key| "#{key}=#{Object.const_get(key)}" }.join(" ")
exec("#{env_variables_to_inject} bundle exec rspec #{ARGV.join(' ')}")
